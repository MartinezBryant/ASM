     1                                  ; Program name: "Program Name". A short description of the purpose of the program
     2                                  ; Copyright (C) <2023>  <Your Name>
     3                                  
     4                                  ; This file is part of the software program "Program Name".
     5                                  
     6                                  ; "Program Name" is free software: you can redistribute it and/or modify
     7                                  ; it under the terms of the GNU General Public License as published by
     8                                  ; the Free Software Foundation, either version 3 of the License, or
     9                                  ; (at your option) any later version.
    10                                  
    11                                  ; "Program Name" is distributed in the hope that it will be useful,
    12                                  ; but WITHOUT ANY WARRANTY; without even the implied warranty of
    13                                  ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    14                                  ; GNU General Public License for more details.
    15                                  
    16                                  ; You should have received a copy of the GNU General Public License
    17                                  ; along with this program.  If not, see <https://www.gnu.org/licenses/>.
    18                                  
    19                                  ; Author information
    20                                  ;   Author name : Code Goblin
    21                                  ;   Author email: instalock_caitlyn@bronze2.botlane
    22                                  ;   Author section: 240-99
    23                                  ;   Author CWID : 000000000
    24                                  
    25                                  ; For research purpose only. Please don't copy word for word. Avoid academic dishonesty.
    26                                  
    27                                  global isinteger
    28                                      extern strlen
    29                                      extern printf
    30                                  segment .data
    31                                  segment .bss
    32                                  segment .text
    33                                  isinteger:
    34                                      ;15 pushes
    35 00000000 55                          push    rbp                     ; Backup rbp
    36 00000001 4889E5                      mov     rbp,rsp                 ; The base pointer now points to top of stack
    37 00000004 57                          push    rdi                     ; Backup rdi
    38 00000005 56                          push    rsi                     ; Backup rsi
    39 00000006 52                          push    rdx                     ; Backup rdx
    40 00000007 51                          push    rcx                     ; Backup rcx
    41 00000008 4150                        push    r8                      ; Backup r8
    42 0000000A 4151                        push    r9                      ; Backup r9
    43 0000000C 4152                        push    r10                     ; Backup r10
    44 0000000E 4153                        push    r11                     ; Backup r11
    45 00000010 4154                        push    r12                     ; Backup r12
    46 00000012 4155                        push    r13                     ; Backup r13
    47 00000014 4156                        push    r14                     ; Backup r14
    48 00000016 4157                        push    r15                     ; Backup r15
    49 00000018 53                          push    rbx                     ; Backup rbx
    50 00000019 9C                          pushf                           ; Backup rflags
    51                                  
    52 0000001A 4989FF                      mov     r15, rdi                ; rdi contains the start of the array
    53 0000001D 41BE01000000                mov     r14, 1                  ; r14 is the index starting at 1
    54                                  
    55                                      ; Get the string length
    56 00000023 4C89FF                      mov     rdi, r15
    57 00000026 E8(00000000)                call    strlen
    58 0000002B 4989C5                      mov     r13, rax                
    59 0000002E 49FFCD                      dec     r13                     ; r13 store the string length minus the null termination character
    60                                  
    61                                      ; Check if the first element is '+' or '-' and continute validation if so
    62 00000031 41803F2B                    cmp     byte[r15], '+'
    63 00000035 7414                        je      continue_validation
    64 00000037 41803F2D                    cmp     byte[r15], '-'
    65 0000003B 740E                        je      continue_validation
    66                                  
    67                                      ; Check if the first element is a digit, continue to the loop if it is
    68 0000003D 498B3F                      mov     rdi, [r15]
    69 00000040 E847000000                  call    is_digit                ; The result is stored in rax
    70 00000045 4883F800                    cmp     rax, false              ; false is defined in is_digit() below
    71 00000049 7419                        je      not_an_integer
    72                                  
    73                                  continue_validation:
    74                                      ; If index >= length, stop checking
    75 0000004B 4D39EE                      cmp     r14, r13
    76 0000004E 7D1B                        jge     is_an_integer  
    77                                  
    78                                      ; Check if array[index] is a digit, translate to { is_digit(array[index]) } code in C
    79 00000050 4B8B3C37                    mov     rdi, [r15 + r14 * 1]    ; Calculate the address of a char(byte) array. r15 is the base address, r14 * 1 is the offset. 1 is redundant, but showing it is offset by 1 byte time the index count
    80 00000054 E833000000                  call    is_digit
    81                                  
    82                                      ; If array[index] is not a digit, return false
    83 00000059 4883F800                    cmp     rax, false              ; Assembly has no bolean; 0 = false, -1 = true as user defined in is_digit() below
    84 0000005D 7405                        je      not_an_integer
    85                                  
    86                                      ; If array[index] is a digit, continue the loop
    87 0000005F 49FFC6                      inc     r14
    88 00000062 EBE7                        jmp     continue_validation
    89                                  
    90                                  not_an_integer:
    91                                      ; Set the return to false
    92 00000064 B800000000                  mov     rax, false       
    93 00000069 EB09                        jmp     exit
    94                                      
    95                                  is_an_integer:
    96                                      ; Set the return to true
    97 0000006B 48C7C0FFFFFFFF              mov     rax, true    
    98 00000072 EB00                        jmp     exit                
    99                                  
   100                                  exit:
   101                                      ;15 pop
   102 00000074 9D                          popf                            ; Restore rflags
   103 00000075 5B                          pop     rbx                     ; Restore rbx
   104 00000076 415F                        pop     r15                     ; Restore r15
   105 00000078 415E                        pop     r14                     ; Restore r14
   106 0000007A 415D                        pop     r13                     ; Restore r13
   107 0000007C 415C                        pop     r12                     ; Restore r12
   108 0000007E 415B                        pop     r11                     ; Restore r11
   109 00000080 415A                        pop     r10                     ; Restore r10
   110 00000082 4159                        pop     r9                      ; Restore r9
   111 00000084 4158                        pop     r8                      ; Restore r8
   112 00000086 59                          pop     rcx                     ; Restore rcx
   113 00000087 5A                          pop     rdx                     ; Restore rdx
   114 00000088 5E                          pop     rsi                     ; Restore rsi
   115 00000089 5F                          pop     rdi                     ; Restore rdi
   116 0000008A 5D                          pop     rbp                     ; Restore rbp
   117                                  
   118 0000008B C3                          ret
   119                                  
   120                                  ;========= Begin function is_digit ==================================================================================
   121                                  
   122                                  ;****************************************************************************************************************************
   123                                  ;Program name: "is_digit".  This a library function contained in a single file.  The function receives a char parameter.  It*
   124                                  ;returns true if that parameter is the ascii value of a decimal digit and returns false in all other cases.                  *
   125                                  ;Copyright (C) 2022 Floyd Holliday.                                                                                         *
   126                                  ;                                                                                                                           *
   127                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public   *
   128                                  ;License version 3 as published by the Free Software Foundation.  This program is distributed in the hope that it will be   *
   129                                  ;useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.*
   130                                  ;See the GNU Lesser General Public License for more details. A copy of the GNU General Public License v3 is available here: *
   131                                  ;<https:;www.gnu.org/licenses/>.                                                                                            *
   132                                  ;****************************************************************************************************************************
   133                                  ;
   134                                  ;
   135                                  ;========1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
   136                                  ;Author information
   137                                  ;  Author name: Floyd Holliday
   138                                  ;  Author email: holliday@fullerton.edu
   139                                  ;  Author phone (wired phone in CS building): (657)278-7021
   140                                  ;
   141                                  ;Status
   142                                  ;  This software is not an application program, but rather it is a single function licensed for use by other applications.
   143                                  ;  This function can be embedded within both FOSS programs and in proprietary programs as permitted by the LGPL.
   144                                  
   145                                  ;Function information
   146                                  ;  Function name: is_digit
   147                                  ;  Name selection.  This function is named is_digit to avoid confusion with an existing library function named isdigit.
   148                                  ;  Programming language: X86 assembly in Intel syntax.
   149                                  ;  Date development began:  2022-Feb-28
   150                                  ;  Date version 1.0 finished: 2022-Feb 28
   151                                  ;  Files of this function: currently is_digit is an auxillary function of isfloat, and as such does not occupy its own file.
   152                                  ;  System requirements: an X86 platform with nasm installed or other compatible assembler.
   153                                  ;  Known issues: none
   154                                  ;  Assembler used for testing: Nasm version 2.14.02
   155                                  ;  Prototype: bool is_digit(char);
   156                                  ;
   157                                  ;Purpose
   158                                  ;  This function wil accept a single char as input parameter and determine if that parameter represents a decimal digit. 
   159                                  ;
   160                                  ;Translation information if this function occupied its own file.  Currently the function is_digit resides in the same 
   161                                  ;same file as isfloat and therefore, will be assembled when isfloat is assembled.
   162                                  ;  Assemble: nasm -f elf64 -l is_digit.lis -o is_digit.o is_digit.asm
   163                                  ;
   164                                  ;Software design document:
   165                                  ;  An Execution flow chart accompanies this function.  That document will provide a better understanding of the 
   166                                  ;  algorithm used in the isfloat function than a direct reading of the source code of the function.
   167                                  
   168                                  ;========= Begin source code ====================================================================================
   169                                  ;Declaration area
   170                                  true equ -1
   171                                  false equ 0
   172                                  ascii_value_of_zero equ 0x30
   173                                  ascii_value_of_nine equ 0x39
   174                                  
   175                                  segment .data
   176                                     ;This segment is empty
   177                                  
   178                                  segment .bss
   179                                     ;This segment is empty
   180                                  
   181                                  segment .text
   182                                  is_digit:
   183                                      ;Block that backs up almost all GPRs
   184                                      ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
   185 0000008C 55                          push rbp                                          ;Backup rbp
   186 0000008D 4889E5                      mov  rbp,rsp                                      ;The base pointer now points to top of stack
   187 00000090 57                          push rdi                                          ;Backup rdi
   188 00000091 56                          push rsi                                          ;Backup rsi
   189 00000092 52                          push rdx                                          ;Backup rdx
   190 00000093 51                          push rcx                                          ;Backup rcx
   191 00000094 4150                        push r8                                           ;Backup r8
   192 00000096 4151                        push r9                                           ;Backup r9
   193 00000098 4152                        push r10                                          ;Backup r10
   194 0000009A 4153                        push r11                                          ;Backup r11
   195 0000009C 4154                        push r12                                          ;Backup r12
   196 0000009E 4155                        push r13                                          ;Backup r13
   197 000000A0 4156                        push r14                                          ;Backup r14
   198 000000A2 4157                        push r15                                          ;Backup r15
   199 000000A4 53                          push rbx                                          ;Backup rbx
   200 000000A5 9C                          pushf                                             ;Backup rflags
   201                                  
   202                                      ;Make a copy of the passed in array of ascii values.
   203                                      ;Note that only the low one-byte of rdi is important for this function is_digit.
   204                                      ;Nevertheless, we copy the entire 8-byte register.
   205 000000A6 41BD00000000                mov r13,0
   206 000000AC 4188FD                      mov r13b,dil     ;Copy the low byte of rdi to the low byte of r13.  The other bytes of rdi are all zeros.
   207                                  
   208                                      ;Block to test if value in r13 >= ascii(0)
   209 000000AF 4983FD30                    cmp r13,ascii_value_of_zero
   210 000000B3 7C12                        jl is_digit.return_false
   211                                  
   212                                      ;Block to test if value in r13 <= ascii(9)
   213 000000B5 4983FD39                    cmp r13,ascii_value_of_nine
   214 000000B9 7F0C                        jg is_digit.return_false
   215                                  
   216                                      ;Return true
   217 000000BB 4831C0                      xor rax,rax  ;Set rax to zero
   218 000000BE 48C7C0FFFFFFFF              mov rax,true
   219 000000C5 EB08                        jmp is_digit.restore_gpr_registers
   220                                  
   221                                      is_digit.return_false:
   222 000000C7 4831C0                      xor rax,rax  ;Set rax to zero
   223 000000CA B800000000                  mov rax,false
   224                                  
   225                                      is_digit.restore_gpr_registers:
   226                                      ;Restore all general purpose registers to their original values
   227 000000CF 9D                          popf                                    ;Restore rflags
   228 000000D0 5B                          pop rbx                                 ;Restore rbx
   229 000000D1 415F                        pop r15                                 ;Restore r15
   230 000000D3 415E                        pop r14                                 ;Restore r14
   231 000000D5 415D                        pop r13                                 ;Restore r13
   232 000000D7 415C                        pop r12                                 ;Restore r12
   233 000000D9 415B                        pop r11                                 ;Restore r11
   234 000000DB 415A                        pop r10                                 ;Restore r10
   235 000000DD 4159                        pop r9                                  ;Restore r9
   236 000000DF 4158                        pop r8                                  ;Restore r8
   237 000000E1 59                          pop rcx                                 ;Restore rcx
   238 000000E2 5A                          pop rdx                                 ;Restore rdx
   239 000000E3 5E                          pop rsi                                 ;Restore rsi
   240 000000E4 5F                          pop rdi                                 ;Restore rdi
   241 000000E5 5D                          pop rbp                                 ;Restore rbp
   242                                  
   243 000000E6 C3                          ret                                     ;Pop the integer stack and jump to the address represented by the popped value.
